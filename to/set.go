// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package to

// StringSet converts []String to map[String]interface{}, with all values equal
// to struct{}{}, to simulate a Set.
func StringSet(ts []string) (s map[string]interface{}) {
	s = make(map[string]interface{}, len(ts))
	for _, t := range ts {
		s[t] = struct{}{}
	}
	return
}

// IntSet converts []Int to map[Int]interface{}, with all values equal
// to struct{}{}, to simulate a Set.
func IntSet(ts []int) (s map[int]interface{}) {
	s = make(map[int]interface{}, len(ts))
	for _, t := range ts {
		s[t] = struct{}{}
	}
	return
}

// Int64Set converts []Int64 to map[Int64]interface{}, with all values equal
// to struct{}{}, to simulate a Set.
func Int64Set(ts []int64) (s map[int64]interface{}) {
	s = make(map[int64]interface{}, len(ts))
	for _, t := range ts {
		s[t] = struct{}{}
	}
	return
}

// Float64Set converts []Float64 to map[Float64]interface{}, with all values equal
// to struct{}{}, to simulate a Set.
func Float64Set(ts []float64) (s map[float64]interface{}) {
	s = make(map[float64]interface{}, len(ts))
	for _, t := range ts {
		s[t] = struct{}{}
	}
	return
}

// ByteSet converts []Byte to map[Byte]interface{}, with all values equal
// to struct{}{}, to simulate a Set.
func ByteSet(ts []byte) (s map[byte]interface{}) {
	s = make(map[byte]interface{}, len(ts))
	for _, t := range ts {
		s[t] = struct{}{}
	}
	return
}

// InterfaceSet converts []Interface to map[Interface]interface{}, with all values equal
// to struct{}{}, to simulate a Set.
func InterfaceSet(ts []interface{}) (s map[interface{}]interface{}) {
	s = make(map[interface{}]interface{}, len(ts))
	for _, t := range ts {
		s[t] = struct{}{}
	}
	return
}
